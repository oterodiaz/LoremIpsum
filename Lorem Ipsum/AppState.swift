//
//  AppState.swift
//  Lorem Ipsum
//
//  Created by Otero DÃ­az on 2023-03-19.
//

import SwiftUI

class AppState: ObservableObject {
    @Published private var _unit: Unit = .paragraphs       { didSet { generateText() } }
    @Published private var _amount     = 0                 { didSet { generateText() } }
    @Published var beginWithLoremIpsum = true              { didSet { generateText() } }
    @Published var showingPreferences  = false
    @Published var text                = "Lorem ipsum."
    private var currentTimer: Timer?
    private var textGenerationEnabled  = true
    private let lipsum                 = LipsumGenerator(learnFrom: [
        Bundle.main.readFile("lorem-ipsum.txt"),
        Bundle.main.readFile("liber-primus.txt")
    ])

    init() {
        amount = unit.defaultAmount
    }

    var amount: Int {
        get { _amount }
        set {
            let newAmount = min(max(newValue, Unit.minAmount), Unit.maxAmount)

            guard newAmount != _amount else {
                return
            }

            _amount = newAmount
        }
    }

    var unit: Unit {
        get { _unit }
        set {
            guard newValue != _unit else {
                return
            }

            // We need to disable text generation in order to avoid
            // wasting resources by generating a new text when updating
            // _amount, since this text would be quickly overwritten by
            // the one generated by _unit's didSet.
            withTextGenerationDisabled {
                self.amount = newValue.defaultAmount
            }

            _unit = newValue
        }
    }

    func setAmountWithDelay(to newValue: Int) {
        withTextGenerationDisabled {
            self.amount = newValue
        }

        withDelay {
            self.generateText()
        }
    }

    func copyText() {
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents()
        pasteboard.setString(text, forType: .string)
    }

    func generateText() {
        guard textGenerationEnabled else {
            return
        }

        guard amount > 0 else {
            fatalError("Cannot generate \(amount) words.")
        }

        let firstKey = beginWithLoremIpsum ? LipsumGenerator.Bigram("Lorem", "ipsum") : nil

        switch unit {
        case .words:
            text = lipsum.generateText(withWords: amount, beginWith: firstKey)
        case .paragraphs:
            var paragraphs = [String]()
            var quantity: Int {
                Int.random(in: 30...70)
            }

            for paragraphIndex in 0..<amount {
                let firstKey = beginWithLoremIpsum && paragraphIndex == 0 ? firstKey : nil
                let paragraph = lipsum.generateText(withWords: quantity, beginWith: firstKey)
                paragraphs.append(paragraph)
            }

            text = paragraphs.joined(separator: "\n\n")
        }
    }

    private func withDelay(of seconds: Double = 0.05, run code: @escaping () -> Void) {
        currentTimer?.invalidate()

        currentTimer = Timer.scheduledTimer(withTimeInterval: seconds, repeats: false) { _ in
            code()
        }
    }

    private func withTextGenerationDisabled(run code: @escaping () -> Void) {
        textGenerationEnabled = false
        code()
        textGenerationEnabled = true
    }
}
